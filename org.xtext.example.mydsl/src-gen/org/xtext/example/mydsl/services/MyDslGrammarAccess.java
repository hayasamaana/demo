/*
 * generated by Xtext
 */
package org.xtext.example.mydsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MyDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AnimationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Animation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAppearParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMoveParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTriggerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSequenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Animation:
		//	Appear | Move | Trigger | Sequence;
		@Override public ParserRule getRule() { return rule; }

		//Appear | Move | Trigger | Sequence
		public Alternatives getAlternatives() { return cAlternatives; }

		//Appear
		public RuleCall getAppearParserRuleCall_0() { return cAppearParserRuleCall_0; }

		//Move
		public RuleCall getMoveParserRuleCall_1() { return cMoveParserRuleCall_1; }

		//Trigger
		public RuleCall getTriggerParserRuleCall_2() { return cTriggerParserRuleCall_2; }

		//Sequence
		public RuleCall getSequenceParserRuleCall_3() { return cSequenceParserRuleCall_3; }
	}

	public class AppearElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Appear");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAppearAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAppearKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGeometryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGeometryIDTerminalRuleCall_2_0 = (RuleCall)cGeometryAssignment_2.eContents().get(0);
		
		//Appear:
		//	{Appear}
		//	'Appear'
		//	geometry=ID;
		@Override public ParserRule getRule() { return rule; }

		//{Appear} 'Appear' geometry=ID
		public Group getGroup() { return cGroup; }

		//{Appear}
		public Action getAppearAction_0() { return cAppearAction_0; }

		//'Appear'
		public Keyword getAppearKeyword_1() { return cAppearKeyword_1; }

		//geometry=ID
		public Assignment getGeometryAssignment_2() { return cGeometryAssignment_2; }

		//ID
		public RuleCall getGeometryIDTerminalRuleCall_2_0() { return cGeometryIDTerminalRuleCall_2_0; }
	}

	public class MoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Move");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cGeometryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cGeometryIDTerminalRuleCall_1_0 = (RuleCall)cGeometryAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cSpeedKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSpeedAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSpeedEFloatParserRuleCall_4_0 = (RuleCall)cSpeedAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Move:
		//	'Move'
		//	geometry=ID
		//	'{'
		//	'speed' speed=EFloat
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//'Move' geometry=ID '{' 'speed' speed=EFloat '}'
		public Group getGroup() { return cGroup; }

		//'Move'
		public Keyword getMoveKeyword_0() { return cMoveKeyword_0; }

		//geometry=ID
		public Assignment getGeometryAssignment_1() { return cGeometryAssignment_1; }

		//ID
		public RuleCall getGeometryIDTerminalRuleCall_1_0() { return cGeometryIDTerminalRuleCall_1_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//'speed'
		public Keyword getSpeedKeyword_3() { return cSpeedKeyword_3; }

		//speed=EFloat
		public Assignment getSpeedAssignment_4() { return cSpeedAssignment_4; }

		//EFloat
		public RuleCall getSpeedEFloatParserRuleCall_4_0() { return cSpeedEFloatParserRuleCall_4_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Trigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTriggerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTriggerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGeometryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGeometryIDTerminalRuleCall_2_0 = (RuleCall)cGeometryAssignment_2.eContents().get(0);
		
		//Trigger:
		//	{Trigger}
		//	'Trigger'
		//	geometry=ID;
		@Override public ParserRule getRule() { return rule; }

		//{Trigger} 'Trigger' geometry=ID
		public Group getGroup() { return cGroup; }

		//{Trigger}
		public Action getTriggerAction_0() { return cTriggerAction_0; }

		//'Trigger'
		public Keyword getTriggerKeyword_1() { return cTriggerKeyword_1; }

		//geometry=ID
		public Assignment getGeometryAssignment_2() { return cGeometryAssignment_2; }

		//ID
		public RuleCall getGeometryIDTerminalRuleCall_2_0() { return cGeometryIDTerminalRuleCall_2_0; }
	}

	public class SequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.Sequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cSequenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cSequenceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGeometryAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGeometryIDTerminalRuleCall_2_0 = (RuleCall)cGeometryAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAnimationsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cAnimationsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cAnimationsAnimationParserRuleCall_4_2_0 = (RuleCall)cAnimationsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cAnimationsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cAnimationsAnimationParserRuleCall_4_3_1_0 = (RuleCall)cAnimationsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Sequence:
		//	{Sequence}
		//	'Sequence'
		//	geometry=ID
		//	'{' ('animations' '{' animations+=Animation ("," animations+=Animation)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }

		//{Sequence} 'Sequence' geometry=ID '{' ('animations' '{' animations+=Animation ("," animations+=Animation)* '}')? '}'
		public Group getGroup() { return cGroup; }

		//{Sequence}
		public Action getSequenceAction_0() { return cSequenceAction_0; }

		//'Sequence'
		public Keyword getSequenceKeyword_1() { return cSequenceKeyword_1; }

		//geometry=ID
		public Assignment getGeometryAssignment_2() { return cGeometryAssignment_2; }

		//ID
		public RuleCall getGeometryIDTerminalRuleCall_2_0() { return cGeometryIDTerminalRuleCall_2_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//('animations' '{' animations+=Animation ("," animations+=Animation)* '}')?
		public Group getGroup_4() { return cGroup_4; }

		//'animations'
		public Keyword getAnimationsKeyword_4_0() { return cAnimationsKeyword_4_0; }

		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }

		//animations+=Animation
		public Assignment getAnimationsAssignment_4_2() { return cAnimationsAssignment_4_2; }

		//Animation
		public RuleCall getAnimationsAnimationParserRuleCall_4_2_0() { return cAnimationsAnimationParserRuleCall_4_2_0; }

		//("," animations+=Animation)*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//animations+=Animation
		public Assignment getAnimationsAssignment_4_3_1() { return cAnimationsAssignment_4_3_1; }

		//Animation
		public RuleCall getAnimationsAnimationParserRuleCall_4_3_1_0() { return cAnimationsAnimationParserRuleCall_4_3_1_0; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }

		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class EFloatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.mydsl.MyDsl.EFloat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_4_0 = (Alternatives)cGroup_4.eContents().get(0);
		private final Keyword cEKeyword_4_0_0 = (Keyword)cAlternatives_4_0.eContents().get(0);
		private final Keyword cEKeyword_4_0_1 = (Keyword)cAlternatives_4_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//EFloat ecore::EFloat:
		//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
		@Override public ParserRule getRule() { return rule; }

		//'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
		public Group getGroup() { return cGroup; }

		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }

		//INT?
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }

		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }

		//INT
		public RuleCall getINTTerminalRuleCall_3() { return cINTTerminalRuleCall_3; }

		//(('E' | 'e') '-'? INT)?
		public Group getGroup_4() { return cGroup_4; }

		//('E' | 'e')
		public Alternatives getAlternatives_4_0() { return cAlternatives_4_0; }

		//'E'
		public Keyword getEKeyword_4_0_0() { return cEKeyword_4_0_0; }

		//'e'
		public Keyword getEKeyword_4_0_1() { return cEKeyword_4_0_1; }

		//'-'?
		public Keyword getHyphenMinusKeyword_4_1() { return cHyphenMinusKeyword_4_1; }

		//INT
		public RuleCall getINTTerminalRuleCall_4_2() { return cINTTerminalRuleCall_4_2; }
	}
	
	
	private final AnimationElements pAnimation;
	private final AppearElements pAppear;
	private final MoveElements pMove;
	private final TriggerElements pTrigger;
	private final SequenceElements pSequence;
	private final EFloatElements pEFloat;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public MyDslGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pAnimation = new AnimationElements();
		this.pAppear = new AppearElements();
		this.pMove = new MoveElements();
		this.pTrigger = new TriggerElements();
		this.pSequence = new SequenceElements();
		this.pEFloat = new EFloatElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.mydsl.MyDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Animation:
	//	Appear | Move | Trigger | Sequence;
	public AnimationElements getAnimationAccess() {
		return pAnimation;
	}
	
	public ParserRule getAnimationRule() {
		return getAnimationAccess().getRule();
	}

	//Appear:
	//	{Appear}
	//	'Appear'
	//	geometry=ID;
	public AppearElements getAppearAccess() {
		return pAppear;
	}
	
	public ParserRule getAppearRule() {
		return getAppearAccess().getRule();
	}

	//Move:
	//	'Move'
	//	geometry=ID
	//	'{'
	//	'speed' speed=EFloat
	//	'}';
	public MoveElements getMoveAccess() {
		return pMove;
	}
	
	public ParserRule getMoveRule() {
		return getMoveAccess().getRule();
	}

	//Trigger:
	//	{Trigger}
	//	'Trigger'
	//	geometry=ID;
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}

	//Sequence:
	//	{Sequence}
	//	'Sequence'
	//	geometry=ID
	//	'{' ('animations' '{' animations+=Animation ("," animations+=Animation)* '}')?
	//	'}';
	public SequenceElements getSequenceAccess() {
		return pSequence;
	}
	
	public ParserRule getSequenceRule() {
		return getSequenceAccess().getRule();
	}

	//EFloat ecore::EFloat:
	//	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?
	public EFloatElements getEFloatAccess() {
		return pEFloat;
	}
	
	public ParserRule getEFloatRule() {
		return getEFloatAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}

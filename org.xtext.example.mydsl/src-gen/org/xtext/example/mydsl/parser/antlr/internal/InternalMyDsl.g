/*
 * generated by Xtext
 */
grammar InternalMyDsl;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.xtext.example.mydsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.mydsl.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

}

@parser::members {

 	private MyDslGrammarAccess grammarAccess;
 	
    public InternalMyDslParser(TokenStream input, MyDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Animation";	
   	}
   	
   	@Override
   	protected MyDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleAnimation
entryRuleAnimation returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAnimationRule()); }
	 iv_ruleAnimation=ruleAnimation 
	 { $current=$iv_ruleAnimation.current; } 
	 EOF 
;

// Rule Animation
ruleAnimation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getAnimationAccess().getAppearParserRuleCall_0()); 
    }
    this_Appear_0=ruleAppear
    { 
        $current = $this_Appear_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAnimationAccess().getMoveParserRuleCall_1()); 
    }
    this_Move_1=ruleMove
    { 
        $current = $this_Move_1.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAnimationAccess().getTriggerParserRuleCall_2()); 
    }
    this_Trigger_2=ruleTrigger
    { 
        $current = $this_Trigger_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAnimationAccess().getSequenceParserRuleCall_3()); 
    }
    this_Sequence_3=ruleSequence
    { 
        $current = $this_Sequence_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAppear
entryRuleAppear returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAppearRule()); }
	 iv_ruleAppear=ruleAppear 
	 { $current=$iv_ruleAppear.current; } 
	 EOF 
;

// Rule Appear
ruleAppear returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAppearAccess().getAppearAction_0(),
            $current);
    }
)	otherlv_1='Appear' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getAppearAccess().getAppearKeyword_1());
    }
(
(
		lv_geometry_2_0=RULE_ID
		{
			newLeafNode(lv_geometry_2_0, grammarAccess.getAppearAccess().getGeometryIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAppearRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"geometry",
        		lv_geometry_2_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))
;





// Entry rule entryRuleMove
entryRuleMove returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMoveRule()); }
	 iv_ruleMove=ruleMove 
	 { $current=$iv_ruleMove.current; } 
	 EOF 
;

// Rule Move
ruleMove returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='Move' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMoveAccess().getMoveKeyword_0());
    }
(
(
		lv_geometry_1_0=RULE_ID
		{
			newLeafNode(lv_geometry_1_0, grammarAccess.getMoveAccess().getGeometryIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getMoveRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"geometry",
        		lv_geometry_1_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_2='{' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getMoveAccess().getLeftCurlyBracketKeyword_2());
    }
	otherlv_3='speed' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMoveAccess().getSpeedKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMoveAccess().getSpeedEFloatParserRuleCall_4_0()); 
	    }
		lv_speed_4_0=ruleEFloat		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMoveRule());
	        }
       		set(
       			$current, 
       			"speed",
        		lv_speed_4_0, 
        		"org.xtext.example.mydsl.MyDsl.EFloat");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMoveAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleTrigger
entryRuleTrigger returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTriggerRule()); }
	 iv_ruleTrigger=ruleTrigger 
	 { $current=$iv_ruleTrigger.current; } 
	 EOF 
;

// Rule Trigger
ruleTrigger returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getTriggerAccess().getTriggerAction_0(),
            $current);
    }
)	otherlv_1='Trigger' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTriggerAccess().getTriggerKeyword_1());
    }
(
(
		lv_geometry_2_0=RULE_ID
		{
			newLeafNode(lv_geometry_2_0, grammarAccess.getTriggerAccess().getGeometryIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTriggerRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"geometry",
        		lv_geometry_2_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
))
;





// Entry rule entryRuleSequence
entryRuleSequence returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSequenceRule()); }
	 iv_ruleSequence=ruleSequence 
	 { $current=$iv_ruleSequence.current; } 
	 EOF 
;

// Rule Sequence
ruleSequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSequenceAccess().getSequenceAction_0(),
            $current);
    }
)	otherlv_1='Sequence' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSequenceAccess().getSequenceKeyword_1());
    }
(
(
		lv_geometry_2_0=RULE_ID
		{
			newLeafNode(lv_geometry_2_0, grammarAccess.getSequenceAccess().getGeometryIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSequenceRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"geometry",
        		lv_geometry_2_0, 
        		"org.eclipse.xtext.common.Terminals.ID");
	    }

)
)	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getSequenceAccess().getLeftCurlyBracketKeyword_3());
    }
(	otherlv_4='animations' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getSequenceAccess().getAnimationsKeyword_4_0());
    }
	otherlv_5='{' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getSequenceAccess().getLeftCurlyBracketKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceAccess().getAnimationsAnimationParserRuleCall_4_2_0()); 
	    }
		lv_animations_6_0=ruleAnimation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceRule());
	        }
       		add(
       			$current, 
       			"animations",
        		lv_animations_6_0, 
        		"org.xtext.example.mydsl.MyDsl.Animation");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_7=',' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getSequenceAccess().getCommaKeyword_4_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSequenceAccess().getAnimationsAnimationParserRuleCall_4_3_1_0()); 
	    }
		lv_animations_8_0=ruleAnimation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSequenceRule());
	        }
       		add(
       			$current, 
       			"animations",
        		lv_animations_8_0, 
        		"org.xtext.example.mydsl.MyDsl.Animation");
	        afterParserOrEnumRuleCall();
	    }

)
))*	otherlv_9='}' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getSequenceAccess().getRightCurlyBracketKeyword_4_4());
    }
)?	otherlv_10='}' 
    {
    	newLeafNode(otherlv_10, grammarAccess.getSequenceAccess().getRightCurlyBracketKeyword_5());
    }
)
;





// Entry rule entryRuleEFloat
entryRuleEFloat returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getEFloatRule()); } 
	 iv_ruleEFloat=ruleEFloat 
	 { $current=$iv_ruleEFloat.current.getText(); }  
	 EOF 
;

// Rule EFloat
ruleEFloat returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEFloatAccess().getHyphenMinusKeyword_0()); 
    }
)?(    this_INT_1=RULE_INT    {
		$current.merge(this_INT_1);
    }

    { 
    newLeafNode(this_INT_1, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_1()); 
    }
)?
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEFloatAccess().getFullStopKeyword_2()); 
    }
    this_INT_3=RULE_INT    {
		$current.merge(this_INT_3);
    }

    { 
    newLeafNode(this_INT_3, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_3()); 
    }
((
	kw='E' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEFloatAccess().getEKeyword_4_0_0()); 
    }

    |
	kw='e' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEFloatAccess().getEKeyword_4_0_1()); 
    }
)(
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getEFloatAccess().getHyphenMinusKeyword_4_1()); 
    }
)?    this_INT_7=RULE_INT    {
		$current.merge(this_INT_7);
    }

    { 
    newLeafNode(this_INT_7, grammarAccess.getEFloatAccess().getINTTerminalRuleCall_4_2()); 
    }
)?)
    ;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


